# SAI Dashboard - Docker Compose Configuration
# Production-ready deployment for SAI Image Analysis Dashboard

version: '3.8'

services:
  # =================================================================
  # SAI Dashboard Backend API
  # =================================================================
  sai-dashboard-api:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    image: sai-dashboard-api:latest
    container_name: sai-dashboard-api
    
    ports:
      - "0.0.0.0:${API_PORT:-3001}:3001"  # Development: accessible from network
    
    environment:
      # Application settings
      - NODE_ENV=production
      - API_PORT=3001
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=json
      
      # Database connection (connects to host n8n database)
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@host.docker.internal:${DB_PORT}/${DB_NAME}
      - DB_MAX_CONNECTIONS=5
      - DB_CONNECTION_TIMEOUT=5000
      
      # SAI workflow configuration
      - SAI_WORKFLOW_NAME=${SAI_WORKFLOW_NAME}
      - DEFAULT_PAGE_SIZE=${DEFAULT_PAGE_SIZE:-50}
      - MAX_IMAGE_SIZE=${MAX_IMAGE_SIZE:-5242880}
      
      # Security (updated for password authentication)
      - DASHBOARD_PASSWORD=${DASHBOARD_PASSWORD}
      - SESSION_SECRET=${SESSION_SECRET}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-60}
      - ENFORCE_HTTPS=${ENFORCE_HTTPS:-false}
      - TRUST_PROXY=true
      
      # Filesystem cache configuration
      - CACHE_PATH=/cache
      - ENABLE_THUMBNAIL_GENERATION=${ENABLE_THUMBNAIL_GENERATION:-true}
      
      # SSE Configuration
      - SSE_HEARTBEAT_INTERVAL=${SSE_HEARTBEAT_INTERVAL:-30000}
      - SSE_MAX_CLIENTS=${SSE_MAX_CLIENTS:-100}
      
    volumes:
      # Mount filesystem cache
      - /mnt/raid1/n8n/backup/images:/cache
      
    # Remove Redis dependency for now
    # depends_on:
    #   - sai-dashboard-redis
      
    restart: unless-stopped
    
    # Fix for Linux Docker networking
    extra_hosts:
      - "host.docker.internal:host-gateway"
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    labels:
      - "com.sai.service=dashboard-api"
      - "com.sai.version=1.0.0"

  # =================================================================
  # SAI Dashboard Frontend  
  # =================================================================
  sai-dashboard-ui:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        - REACT_APP_API_URL=http://localhost:${API_PORT:-3001}
        - REACT_APP_VERSION=1.0.0
    image: sai-dashboard-ui:latest
    container_name: sai-dashboard-ui
    
    ports:
      - "0.0.0.0:${FRONTEND_PORT:-3000}:80"  # Development: accessible from network
    
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=80
    
    depends_on:
      - sai-dashboard-api
      
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s  
      retries: 3
    
    labels:
      - "com.sai.service=dashboard-ui"
      - "com.sai.version=1.0.0"

  # =================================================================
  # Redis Cache (FUTURE USE - currently using filesystem cache)
  # =================================================================
  # sai-dashboard-redis:
  #   image: redis:7-alpine
  #   container_name: sai-dashboard-redis
  #   
  #   ports:
  #     - "${REDIS_PORT:-6379}:6379"
  #   
  #   command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
  #   
  #   volumes:
  #     - sai_redis_data:/data
  #   
  #   restart: unless-stopped
  #   
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 3s
  #     retries: 3
  #   
  #   labels:
  #     - "com.sai.service=cache"
  #   
  #   profiles:
  #     - redis

  # =================================================================
  # Reverse Proxy (Nginx) - Optional
  # =================================================================
  sai-dashboard-proxy:
    image: nginx:alpine
    container_name: sai-dashboard-proxy
    
    ports:
      - "${PROXY_HTTP_PORT:-80}:80"
      - "${PROXY_HTTPS_PORT:-443}:443"
    
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    
    depends_on:
      - sai-dashboard-ui
      - sai-dashboard-api
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    labels:
      - "com.sai.service=proxy"
    
    profiles:
      - proxy

  # =================================================================
  # Monitoring Stack (Optional)
  # =================================================================
  
  # Prometheus for metrics collection
  sai-dashboard-prometheus:
    image: prom/prometheus:latest
    container_name: sai-dashboard-prometheus
    
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    
    restart: unless-stopped
    
    profiles:
      - monitoring
    
    labels:
      - "com.sai.service=metrics"

  # Grafana for monitoring dashboard
  sai-dashboard-grafana:
    image: grafana/grafana:latest
    container_name: sai-dashboard-grafana
    
    ports:
      - "${GRAFANA_PORT:-3002}:3000"
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    depends_on:
      - sai-dashboard-prometheus
    
    restart: unless-stopped
    
    profiles:
      - monitoring
    
    labels:
      - "com.sai.service=dashboard"

# =================================================================
# Named Volumes
# =================================================================
volumes:
  # Redis data persistence
  sai_redis_data:
    name: sai_dashboard_redis_data
    driver: local
  
  # Nginx logs
  nginx_logs:
    name: sai_dashboard_nginx_logs
    driver: local
  
  # Monitoring data
  prometheus_data:
    name: sai_dashboard_prometheus_data
    driver: local
    
  grafana_data:
    name: sai_dashboard_grafana_data
    driver: local

# =================================================================
# Networks  
# =================================================================
networks:
  default:
    name: sai_dashboard_network
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

# =================================================================
# Development Override
# =================================================================
# Use docker-compose.override.yml for development-specific settings:
#
# version: '3.8'
# services:
#   sai-dashboard-api:
#     environment:
#       - NODE_ENV=development
#       - LOG_LEVEL=debug
#     volumes:
#       - ./backend:/app
#       - /app/node_modules
#     command: npm run dev
#
#   sai-dashboard-ui:
#     volumes:
#       - ./frontend:/app
#       - /app/node_modules
#     command: npm run dev